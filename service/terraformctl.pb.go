// Code generated by protoc-gen-go. DO NOT EDIT.
// source: terraformctl.proto

/*
Package terraformctl is a generated protocol buffer package.

It is generated from these files:
	terraformctl.proto

It has these top-level messages:
	GetRequest
	GetResponse
	SetRequest
	SetResponse
*/
package terraformctl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetResponse struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Config string `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetResponse) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type SetRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Config string `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type SetResponse struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Config string `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *SetResponse) Reset()                    { *m = SetResponse{} }
func (m *SetResponse) String() string            { return proto.CompactTextString(m) }
func (*SetResponse) ProtoMessage()               {}
func (*SetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SetResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetResponse) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "terraformctl.service.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "terraformctl.service.GetResponse")
	proto.RegisterType((*SetRequest)(nil), "terraformctl.service.SetRequest")
	proto.RegisterType((*SetResponse)(nil), "terraformctl.service.SetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TerraformCTLAPI service

type TerraformCTLAPIClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
}

type terraformCTLAPIClient struct {
	cc *grpc.ClientConn
}

func NewTerraformCTLAPIClient(cc *grpc.ClientConn) TerraformCTLAPIClient {
	return &terraformCTLAPIClient{cc}
}

func (c *terraformCTLAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/terraformctl.service.TerraformCTLAPI/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformCTLAPIClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := grpc.Invoke(ctx, "/terraformctl.service.TerraformCTLAPI/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TerraformCTLAPI service

type TerraformCTLAPIServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
}

func RegisterTerraformCTLAPIServer(s *grpc.Server, srv TerraformCTLAPIServer) {
	s.RegisterService(&_TerraformCTLAPI_serviceDesc, srv)
}

func _TerraformCTLAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformCTLAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terraformctl.service.TerraformCTLAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformCTLAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraformCTLAPI_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformCTLAPIServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terraformctl.service.TerraformCTLAPI/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformCTLAPIServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerraformCTLAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "terraformctl.service.TerraformCTLAPI",
	HandlerType: (*TerraformCTLAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TerraformCTLAPI_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _TerraformCTLAPI_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terraformctl.proto",
}

func init() { proto.RegisterFile("terraformctl.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x49, 0x2d, 0x2a,
	0x4a, 0x4c, 0xcb, 0x2f, 0xca, 0x4d, 0x2e, 0xc9, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0x41, 0x11, 0x2b, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x55, 0x52, 0xe0, 0xe2, 0x72, 0x4f, 0x2d,
	0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x2c, 0xb9, 0xb8, 0xc1, 0x2a, 0x8a, 0x0b,
	0xf2, 0xf3, 0x8a, 0x53, 0xb1, 0x29, 0x11, 0x12, 0xe3, 0x62, 0x4b, 0xce, 0xcf, 0x4b, 0xcb, 0x4c,
	0x97, 0x60, 0x02, 0x8b, 0x42, 0x79, 0x4a, 0x16, 0x5c, 0x5c, 0xc1, 0x78, 0x0d, 0xc7, 0xa9, 0xd3,
	0x92, 0x8b, 0x3b, 0x98, 0x3c, 0x4b, 0x8d, 0xd6, 0x32, 0x72, 0xf1, 0x87, 0xc0, 0xbc, 0xea, 0x1c,
	0xe2, 0xe3, 0x18, 0xe0, 0x29, 0xe4, 0xc3, 0xc5, 0xec, 0x9e, 0x5a, 0x22, 0xa4, 0xa0, 0x87, 0x2d,
	0x0c, 0xf4, 0x10, 0x01, 0x20, 0xa5, 0x88, 0x47, 0x05, 0xc4, 0x2d, 0x4a, 0x0c, 0x20, 0xd3, 0x82,
	0x71, 0x9b, 0x16, 0x4c, 0xd0, 0xb4, 0x60, 0x64, 0xd3, 0x9c, 0x3c, 0xb8, 0x14, 0x92, 0xf3, 0x73,
	0xf5, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x40, 0xcc, 0xec, 0xa2, 0xcc, 0x62, 0xdd, 0xbc,
	0xfc, 0xb2, 0x44, 0x98, 0x0e, 0x27, 0xa1, 0x10, 0x24, 0x73, 0x02, 0x40, 0xd1, 0x59, 0xec, 0xc1,
	0x18, 0xc0, 0x18, 0xc5, 0x83, 0x6c, 0x7e, 0x12, 0x1b, 0x38, 0xa2, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xe2, 0x3f, 0xaa, 0x19, 0xfe, 0x01, 0x00, 0x00,
}
